//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : SouvenirStore
//  @ File Name : ShoppingCartPanel.java
//  @ Date : 24/03/2015
//  @ Author : Jaya Vignesh
//
//

package sg.edu.nus.iss.se23pt2.posgui;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Vector;

import javax.swing.DefaultCellEditor;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;

import sg.edu.nus.iss.se23pt2.pos.Customer;
import sg.edu.nus.iss.se23pt2.pos.Item;
import sg.edu.nus.iss.se23pt2.pos.Product;
import sg.edu.nus.iss.se23pt2.pos.ShoppingCart;
import sg.edu.nus.iss.se23pt2.pos.SouvenirStore;
import sg.edu.nus.iss.se23pt2.pos.Transaction;

public class ShoppingCartPanel extends JPanel {

    private static final long           serialVersionUID = 1L;

    private SouvenirStore               souvenirStore;
    private ShoppingCart                shoppingCart;
    private java.util.List<Transaction> transactions;
    private JFrame                      parent;
    private JScrollPane                 scrollPane;
    private JScrollPane                 tblScrollPane;
    private JTable                      table;
    private JPanel topPanel;
    private JTextField customerId;
    private JTextField customerName;
    private JTextField total;
    private JTextField discountPercent;
    private JTextField payableAmount;
    private JTextField loyaltyPoints;
    private JTextField redeemPoints;
    private JTextField amountPaid;
    private JTextField balance;
    private Vector<String> columnNames;
    private Map<String, Integer>columnIndices;
    private Vector<Vector<Object>> data;
    private JButton button;

    public ShoppingCartPanel (final SouvenirStore souvenirStore, JFrame parent) {
        this.souvenirStore = souvenirStore;
        this.parent = parent;
        this.shoppingCart = new ShoppingCart();
        setLayout(new BorderLayout(5, 5));

        /* Column Names */
        columnIndices = new HashMap<String, Integer>();
        columnIndices.put("id", 0);
        columnIndices.put("name", 1);
        columnIndices.put("qty", 2);
        columnIndices.put("unitPrice", 3);
        columnIndices.put("price", 4);
        columnIndices.put("button", 5);
        columnNames = new Vector<String>(Arrays.asList(new String[]{ "Product Id", "Product Name", "Qty", "Unit Price", "Price", "" }));
        data = new Vector<Vector<Object>>();

        /* Sample Data */
        /*
        data.add(new Vector<Object>(Arrays.asList(new Object[]{ "CLO/1", "Cloth 1", new Integer(5), new BigDecimal("10.90"), new BigDecimal("0.0"), "x" })));
        data.add(new Vector<Object>(Arrays.asList(new Object[]{ "CLO/2", "Cloth 2", new Integer(3), new BigDecimal("11.90"), new BigDecimal("0.0"), "x" })));
        data.add(new Vector<Object>(Arrays.asList(new Object[]{ "MUG/2", "Mug 2", new Integer(2), new BigDecimal("4.50"), new BigDecimal("0.0"), "x" })));
        data.add(new Vector<Object>(Arrays.asList(new Object[]{ "STA/1", "Stationary 1", new Integer(20), new BigDecimal("1.20"), new BigDecimal("0.0"), "x" })));
        data.add(new Vector<Object>(Arrays.asList(new Object[]{ "STA/2", "Stationary 2", new Integer(10), new BigDecimal("7.90"), new BigDecimal("0.0"), "x" })));
         */

        /** New Record **/
        data.add(new Vector<Object>(Arrays.asList(new Object[]{"", "", "", new BigDecimal("0.0"), new BigDecimal("0.0"), "+"})));

        button = new JButton("+");
        button.setSize(20, 20);

        customerId = new JTextField(10);
        customerName = new JTextField(10);

        topPanel = new JPanel();
        topPanel.setLayout(new FlowLayout( FlowLayout.LEFT, 5, 5));
        topPanel.add(new JLabel("Customer Id"));
        customerId.addFocusListener(new FocusListener() {

            @Override
            public void focusLost (FocusEvent e) {
                String value = customerId.getText();
                if(value != null && !value.trim().isEmpty()){
                    Customer customer = souvenirStore.getMember(value);
                    if(customer == null){
                        customer = new Customer();
                    }
                    if(customer != null){
                        shoppingCart.setCustomer(customer);
                        if(shoppingCart.getMember() != null){
                            loyaltyPoints.setText(String.valueOf(shoppingCart.getMember().getLoyaltyPoints()));
                        }

                        double discount = shoppingCart.getHighestDiscount(customer, souvenirStore.getDiscounts(), getCurrentDateAsString());
                        if(shoppingCart.getDiscount()!=null){
                            discountPercent.setText(String.valueOf(shoppingCart.getDiscount().getDiscPct()));
                        }
                    }
                }
            }

            @Override
            public void focusGained (FocusEvent e) {
                // TODO Auto-generated method stub

            }
        });
        topPanel.add(customerId);
        topPanel.add(new JLabel("Customer Name"));
        customerName.setEditable(false);
        topPanel.add(customerName);

        table = new JTable(new MyTableModel(data, columnNames));
        table.setPreferredScrollableViewportSize(new Dimension(450, 70));
        table.setFillsViewportHeight(true);
        table.setDefaultEditor( String.class, new TextEditor(10));  //Editor for Text fields
        table.setDefaultEditor( Integer.class, new TextEditor(10));  //Editor for Integer fields
        table.getColumnModel().getColumn(columnIndices.get("button")).setCellRenderer(new ButtonRenderer());  //Button Renderer
        table.getColumnModel().getColumn(columnIndices.get("button")).setCellEditor(new ButtonEditor(new JCheckBox()));  //Button Editor
        table.setRowHeight(20);

        /** Modify row selection on table row insert/delete **/
        table.getModel().addTableModelListener(new TableModelListener(){
            @Override
            public void tableChanged (TableModelEvent e) { 
                if(TableModelEvent.DELETE == e.getType()) {
                    table.changeSelection(table.getRowCount(), columnIndices.get("button"), false, false);
                }else if(TableModelEvent.INSERT == e.getType()){
                    table.changeSelection(table.getEditingRow()+1, columnIndices.get("button"), false, false);
                }else if(TableModelEvent.UPDATE == e.getType()){
                    table.changeSelection(table.getEditingRow(), columnIndices.get("button"), false, false);
                    table.changeSelection(table.getEditingRow()+1, columnIndices.get("button"), false, false);
                }
                table.revalidate();
                table.repaint();
            }
        });

        // Create the scroll pane and add the table to it.
        tblScrollPane = new JScrollPane(table);

        /** Button action to add/remove a row **/
        button.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed (ActionEvent e) {
                MyTableModel model = (MyTableModel)table.getModel();
                int selectedRow = table.getEditingRow();
                int rowCount = table.getRowCount();
                if(selectedRow==rowCount-1){
                    String id = (String)((Vector)model.getDataVector().get(selectedRow)).get(columnIndices.get("id"));
                    Product product = null;
                    if(id!=null){
                        product = souvenirStore.getInventory().getProduct(id.toString());
                    }

                    if(product==null){
                        JOptionPane.showMessageDialog(table.getParent(),"Product not found. Please enter valid Product", "Error", JOptionPane.OK_OPTION);
                        table.changeSelection(selectedRow, columnIndices.get("id"), false, false);
                        return;
                    }

                    model.setValueAt(product.getName(), selectedRow, columnIndices.get("name"));
                    model.setValueAt(product.getPrice(), selectedRow, columnIndices.get("unitPrice"));
                    model.setValueAt(model.getValueAt(selectedRow, columnIndices.get("qty")), selectedRow, columnIndices.get("qty"));
                    //model.setValueAt(product.getPrice(), selectedRow, columnIndices.get("unitPrice"));
                    //model.fireTableDataChanged();
                    model.fireTableRowsUpdated(selectedRow, selectedRow);

                    String qty = (String)model.getValueAt(selectedRow, columnIndices.get("qty"));
                    Float unitPrice = (Float)model.getValueAt(selectedRow, columnIndices.get("unitPrice"));
                    shoppingCart.addToCart(new Item(product, (qty==null)?0:Integer.parseInt(qty), (unitPrice==null)?0:unitPrice));
                    total.setText(String.valueOf(shoppingCart.getTotalPriceBeforeDiscount()));
                    calculatePayableAmount(); //Calculate payableAmount 
                    //payableAmount.getParent().validate();
                    //payableAmount.getParent().repaint();

                    /** Adds a row **/
                    model.addRow(new Vector<Object>(Arrays.asList(new Object[]{"", "", "", new BigDecimal("0.0"), new BigDecimal("0.0"), "+"})));
                    model.fireTableRowsInserted(selectedRow, selectedRow+1);

                    /** Change the button text for the previous row**/
                    model.setValueAt("x", selectedRow, table.getColumnCount()-1);
                    model.fireTableCellUpdated(selectedRow, columnIndices.get("button"));

                    table.revalidate();
                    table.repaint();
                }else{
                    int retVal = JOptionPane.showConfirmDialog(table.getParent(),"Do you want to delete the item from the list?", "Delete", JOptionPane.OK_CANCEL_OPTION);
                    if(retVal==0){
                        /** Delete a row **/
                        model.removeRow(selectedRow);
                        shoppingCart.removeFromCart(selectedRow);
                        total.setText(String.valueOf(shoppingCart.getTotalPriceBeforeDiscount()));
                        payableAmount.setText(String.valueOf(shoppingCart.calcFinalPmt(0))); //Calculate payableAmount with discount only

                        /** To fix the button text, if the deleted row is last but one **/
                        if(selectedRow==rowCount-2){
                            model.setValueAt("+", selectedRow, table.getColumnCount()-1);
                            model.fireTableCellUpdated(selectedRow, columnIndices.get("button"));
                        }
                    }else{
                        /** To fix the button text, if the row chosen for deletion is last but one **/
                        if(selectedRow==rowCount-2){
                            model.setValueAt("x", selectedRow, table.getColumnCount()-1);
                            model.fireTableCellUpdated(selectedRow, columnIndices.get("button"));
                        }
                    }
                }
            }
        });

        total = new JTextField(2);
        discountPercent = new JTextField(2);
        payableAmount = new JTextField(2);
        loyaltyPoints = new JTextField(2);
        redeemPoints = new JTextField(2);
        amountPaid = new JTextField(2);
        balance = new JTextField(2);

        redeemPoints.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed (ActionEvent e) { 
               if(JButton.TEXT_CHANGED_PROPERTY.equals(e.getActionCommand())){
                   calculatePayableAmount();
               }
            }
        });

        amountPaid.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed (ActionEvent e) { 
               if(JButton.TEXT_CHANGED_PROPERTY.equals(e.getActionCommand())){
                   calculatePayableAmount();
               }
            }
        });

        add(topPanel, BorderLayout.PAGE_START);

        add("Center", tblScrollPane);

        scrollPane = new JScrollPane(this.createCalculationPanel());
        scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
        add("East", this.scrollPane);

        add(this.createButtonPanel(), BorderLayout.SOUTH);

    }

    /** TableModel - Data container for table **/
    class MyTableModel extends DefaultTableModel {

        public MyTableModel(Vector<Vector<Object>> dataVector, Vector<String> columnNames){
            super(dataVector, columnNames);
        }

        public boolean isCellEditable (int row, int col) {
            // Note that the data/cell address is constant,
            // no matter where the cell appears onscreen.

            if(this.getDataVector().size()-1 == row){
                if (col== columnIndices.get("name") || (col > columnIndices.get("qty") && col < columnIndices.get("button"))) {
                    return false;
                } else {
                    return true;
                }
            }else{
                if(col == columnIndices.get("qty") || col == columnIndices.get("button")){
                    return true;
                }
            }
            return false;
        }

        public void setValueAt (Object aValue, int row, int col) {
            super.setValueAt(aValue, row, col);
            if(col==columnIndices.get("button")){
                button.setText(aValue.toString());
            }
            /** Multiply qty and unitPrice and set it to price on change of qty **/ 
            if(col==columnIndices.get("qty") && aValue!=null){
                super.setValueAt((new BigDecimal(getValueAt(row, columnIndices.get("unitPrice")).toString())).multiply(new BigDecimal(aValue.toString())), row, columnIndices.get("price"));
                if(row < table.getRowCount()-1){
                    shoppingCart.getItems().get(row).setQuantity(Integer.parseInt(aValue.toString()));
                    total.setText(String.valueOf(shoppingCart.getTotalPriceBeforeDiscount()));
                    calculatePayableAmount(); //Calculate payableAmount
                }
            }
        }
    }

    private JPanel createCalculationPanel() {
        JPanel p = new JPanel(new GridLayout(14, 1, 5, 5));

        p.add(new JLabel("Total"));
        total.setEditable(false);
        p.add(total);
        p.add(new JLabel("Discount %"));
        discountPercent.setEditable(false);
        p.add(discountPercent);
        p.add(new JLabel("Loyalty Points"));
        loyaltyPoints.setEditable(false);
        p.add(loyaltyPoints);
        p.add(new JLabel("Redeem Points"));
        p.add(redeemPoints);
        p.add(new JLabel("Payable Amount"));
        payableAmount.setEditable(false);
        p.add(payableAmount);
        p.add(new JLabel("Paid"));
        p.add(amountPaid);
        p.add(new JLabel("Balance"));
        balance.setEditable(false);
        p.add(balance);

        JPanel bp = new JPanel();
        bp.setLayout(new BorderLayout(5, 5));
        bp.add("North", p);
        return bp;
    }

    private JPanel createButtonPanel () {

        JPanel p = new JPanel(new FlowLayout(FlowLayout.RIGHT, 5, 5));

        JButton b = new JButton("Confirm");
        b.addActionListener(new ActionListener() {
            public void actionPerformed (ActionEvent e) {

            }
        });
        p.add(b);

        b = new JButton("Cancel");
        b.addActionListener(new ActionListener() {
            public void actionPerformed (ActionEvent e) {

            }
        });
        p.add(b);

        b = new JButton("Close");
        b.addActionListener(new ActionListener() {
            public void actionPerformed (ActionEvent e) {
                ShoppingCartPanel.this.parent.setContentPane(new EmptyPanel(
                        ShoppingCartPanel.this.parent));
                ShoppingCartPanel.this.parent.repaint();
            }
        });
        p.add(b);

        JPanel bp = new JPanel();
        bp.setLayout(new BorderLayout());
        bp.add("North", p);
        return bp;
    }

    class ButtonRenderer extends JButton implements TableCellRenderer {
        public ButtonRenderer() {
            setOpaque(true);
        }
        public Component getTableCellRendererComponent(JTable table, Object value,
                boolean isSelected, boolean hasFocus, int row, int column) {
            setText((value == null) ? "" : value.toString());
            setSize(20, 20);
            return this;
        }
    }
    class ButtonEditor extends DefaultCellEditor {
        private String label;
        public ButtonEditor(JCheckBox checkBox) {
            super(checkBox);
        }
        public Component getTableCellEditorComponent(JTable table, Object value,
                boolean isSelected, int row, int column) {
            label = (value == null) ? "" : value.toString();
            if( ("x".equals(button.getText()) && table.getEditingRow() < table.getRowCount()-1) || 
                    ("+".equals(button.getText()) && table.getEditingRow() == table.getRowCount()-1)){
            }else{
                button.setText(label);                
            }
            button.setSize(20, 20);
            return button;
        }
        public Object getCellEditorValue() {
            return new String(label);
        }

        public boolean stopCellEditing(){
            if( ("x".equals(button.getText()) && table.getEditingRow() < table.getRowCount()-1) || 
                    ("+".equals(button.getText()) && table.getEditingRow() == table.getRowCount()-1)){
                return true;
            }else{
                return super.stopCellEditing();
            }
        }
    }

    private void calculatePayableAmount(){
        String strLPoints = loyaltyPoints.getText();
        String strRPoints = redeemPoints.getText();
        String strAmtPaid = amountPaid.getText();
        int lPoints = 0;
        int rPoints = 0;
        double amtPaid = 0;
        double payableAmt = 0;
        if(strRPoints != null && !strRPoints.trim().isEmpty()){
            if(strLPoints != null && !strLPoints.trim().isEmpty()){
                try{
                    lPoints = Integer.parseInt(strLPoints);
                    rPoints = Integer.parseInt(strRPoints);
                    if(lPoints > 0 && lPoints < rPoints){
                        JOptionPane.showMessageDialog(table.getParent(),"Points to be redeemed cannot be greater than available loyalty points", "Error", JOptionPane.OK_OPTION);
                        redeemPoints.requestFocusInWindow();
                        return;
                    }
                }catch(Exception ex){
                    JOptionPane.showMessageDialog(table.getParent(),"Error validating redeem points->"+ex.getMessage(), "Error", JOptionPane.OK_OPTION);
                    redeemPoints.setText("");
                    redeemPoints.requestFocusInWindow();
                    return;
                }
            }
        }
        
        try{
            payableAmt = shoppingCart.getPayableAmount(rPoints);
            payableAmount.setText(String.valueOf(payableAmt)); 

            if(strAmtPaid != null && !strAmtPaid.trim().isEmpty()){
                amtPaid = Double.parseDouble(strAmtPaid);
                if(amtPaid < payableAmt){
                    JOptionPane.showMessageDialog(table.getParent(),"Amount paid is less than the Payable amount", "Error", JOptionPane.OK_OPTION);
                    amountPaid.requestFocusInWindow();
                    return;
                }
            }
        }catch(Exception ex){
            JOptionPane.showMessageDialog(table.getParent(),"Error validating Payable amount->"+ex.getMessage(), "Error", JOptionPane.OK_OPTION);
            amountPaid.requestFocusInWindow();
        }
    
    }

    private String getCurrentDateAsString(){
        Date date = new Date(System.currentTimeMillis());
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        return dateFormat.format(date);
    }
}