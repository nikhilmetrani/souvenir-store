//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : SouvenirStore
//  @ File Name : DataStoreFactory.java
//  @ Date : 06/03/2015
//  @ Author : Jaya Vignesh
//
//

package sg.edu.nus.iss.se23pt2.pos.datastore;

import java.io.IOException;
import java.nio.file.AccessDeniedException;
import java.util.HashMap;
import java.util.Map;

public class DataStoreFactory
{
	private static DataStoreFactory dataStoreFactory = new DataStoreFactory();
	private DataStore storeKeeperDS, categoryDS, productDS, memberDS, discountDS, transactionDS;
	private Map<String, VendorDS> vendorDS;


	private void createDataStoreFactory()
	{
	    vendorDS = new HashMap<String, VendorDS>();
	}
	
	public static DataStoreFactory getInstance()
	{
	    return dataStoreFactory;
	}
	
	public DataStore getStoreKeeperDS() throws AccessDeniedException, IOException
	{
	    if(storeKeeperDS == null)
	        storeKeeperDS = new StoreKeeperDS();
	    return storeKeeperDS;
	}
	
	public DataStore getCategoryDS() throws AccessDeniedException, IOException
	{
        if(categoryDS == null)
            categoryDS = new CategoryDS();
        return categoryDS;
	}
	
	public DataStore getVendorDS(String category) throws AccessDeniedException, IOException
	{
        if(!vendorDS.containsKey(category))
            vendorDS.put(category.toUpperCase(), new VendorDS(category.toUpperCase()));
        return vendorDS.get(category.toUpperCase());
	}
	
	public DataStore getProductDS() throws AccessDeniedException, IOException
	{
        if(productDS == null)
            productDS = new ProductDS();
        return productDS;
	}
	
	public DataStore getMemberDS() throws AccessDeniedException, IOException
	{
        if(memberDS == null)
            memberDS = new MemberDS();
        return memberDS;
	}
	
	public DataStore getDiscountDS() throws AccessDeniedException, IOException
	{
        if(discountDS == null)
            discountDS = new DiscountDS();
        return discountDS;
	}
	
	public DataStore getTransactionDS() throws AccessDeniedException, IOException
	{
        if(transactionDS == null)
            transactionDS = new TransactionDS();
        return transactionDS;
	}
	
}
