package sg.edu.nus.iss.se23pt2.pos;

import sg.edu.nus.iss.se23pt2.pos.exception.InsufficientQuantityException;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : SouvenirStore
//  @ File Name : Product.java
//  @ Date : 3/8/2015
//  @ Author : Nikhil Metrani
//
//



/** */
public class Product {
    /** */
    private String id;
    
    /** */
    private String name;
    
    /** */
    private String description;
    
    /** */
    private Integer quantity;
    
    /** */
    private Float price;
    
    /** */
    private String barcode;
    
    /** */
    private Integer reorderThresholdQuantity;
    
    /** */
    private Integer orderQuantity;
	
    /** */
    public Category category;
    
	/** */
    public Product() {
		this(null, null);
    }
	
    /** */
    public Product(String id, String name) {
    	this(id, name, null);
    }
    
    /** */
    public Product(String id, String name, String description) {
    	this(id, name, description, 0);
    }
    
    /** */
    public Product(String id, String name, String description, Integer quantity) {
    	this(id, name, description, quantity, 0);
    }
    
    /** */
    public Product(String id, String name, String description, Integer quantity,
    		Integer reorderThresholdQuantity) {
    	this(id, name, description, quantity, reorderThresholdQuantity, new Float(0));
    }
    
    /** */
    public Product(String id, String name, String description, Integer quantity,
    		Integer reorderThresholdQuantity, Float price) {
    	this(id, name, description, quantity, reorderThresholdQuantity, price, null);
    }
    
    /** */
    public Product(String id, String name, String description, Integer quantity,
    		Integer reorderThresholdQuantity, Float price, String barcode) {
    	this(id, name, description, quantity, reorderThresholdQuantity, price, barcode, 0);
    }
    
    /** */
    public Product(String id, String name, String description, Integer quantity,
    		Integer reorderThresholdQuantity, Float price, String barcode,
    		Integer orderQuantity) {
    	this(id, name, description, quantity, reorderThresholdQuantity, price, barcode, orderQuantity, null);
    }
    
    /** */
    public Product(String id, String name, String description, Integer quantity,
    		Integer reorderThresholdQuantity, Float price, String barcode,
    		Integer orderQuantity, Category category) {
    	this.id = id;
    	this.name = name;
    	this.description = description;
    	this.quantity = quantity;
    	this.reorderThresholdQuantity = reorderThresholdQuantity;
    	this.price = price;
    	this.barcode = barcode;
    	this.orderQuantity = orderQuantity;
    	this.setCategory(category);
    }
    
    public void setId(String id) {
    	if (null != id) {
    		if (null != this.category) {
    			if (!id.startsWith(this.category.getCode() + "/"))
    				this.id = this.category.getCode() + "/" + id;
    			else
    				this.id = id;
    		}
    		else {
    			this.id = id;
    		}
    	}
    }
    
    public String getId() {
    	return this.id;
    }
    
    /** */
    public void setName(String name) {
    	if (null != name)
    		this.name = name;
    }
    
    /** */
    public String getName() {
    	return this.name;
    }

    /** */
    public void setDescription(String description) {
    	if (null != description)
    		this.description = description;
    }
    
    /** */
    public String getDescription() {
    	return this.description;
    }

    /** */
    public void setCategory(Category category) {
    	if (null != category) {
    		String oldCategory;
    		if (null != this.category) {
    			oldCategory = this.category.getCode();
	    		this.category = category;
	    		this.setId(this.id.replace(oldCategory + "/", ""));
    		}
    		else {
    			this.category = category;
    			this.setId(this.getId());
    		}
    	}
    }
    
    /** */
    public Category getCategory() {
    	return this.category;
    }
    
    /** */
    public void setPrice(Float price) {
    	if (null != price)
    		this.price = Float.valueOf(price);
    }
    
    /** */
    public Float getPrice() {
    	return this.price;
    }

    /** */
    public void setReorderThresholdQty(Integer reorderThresholdQuantity) {
    	if ((null != reorderThresholdQuantity) && (0 <= reorderThresholdQuantity))
    		this.reorderThresholdQuantity = reorderThresholdQuantity;
    }
    
    /** */
    public Integer getReorderThresholdQuantity() {
    	return this.reorderThresholdQuantity;
    }

    /** */
    public void setOrderQuantity(Integer orderQuantity) {
    	if ((null != orderQuantity) && (0 <= orderQuantity))
    		this.orderQuantity = orderQuantity;
    }
 
    /** */
    public Integer getOrderQuantity() {
    	return this.orderQuantity;
    }

    /** */
    public void setQuantity (Integer quantity) {
    	if ((null != quantity) && (0 <= quantity))
    		this.quantity = quantity;
    }

    /** */
    public Integer getQuantity() {
    	return this.quantity;
    }

    public void setBarcode(String barcode) {
    	if (null != barcode)
    		this.barcode = barcode;
    }
    /** */
    public String getBarcode() {
    	return this.barcode;
    }
    
    /** */
    public Integer addQuantity(Integer quantity) {
    	if ((null != quantity) && (0 <= quantity)) {
    		this.setQuantity(this.getQuantity() + quantity);
    	}
    	return this.getQuantity();
    }
    
    /** */
    public Integer deductQuantity(Integer quantity) throws InsufficientQuantityException{
    	if ((null != quantity) && (0 <= quantity)) {
    		if (this.getQuantity() < quantity)
    			throw new InsufficientQuantityException("Not enough quantity to deduct");
    		else
    			this.setQuantity(this.getQuantity() - quantity);
    	}
    	return this.getQuantity();
    }
    
    /** */
    @Override
    public boolean equals(Object obj) {
    	if (obj instanceof Product) {
	    	if (this.id.equals(((Product)obj).getId())) // && this.name.equals(((Category)obj).getName()))
	    		return true;
    	}
    	return false;
    }
    
    /** */
    @Override
    public String toString() {
    	StringBuilder stb = new StringBuilder();
		stb = stb.append((null != this.getId()) ? this.getId() : "").append(",")
				.append((null != this.getName()) ? this.getName() : "").append(",")
				.append((null != this.getDescription()) ? this.getDescription() : "").append(",")
				.append(this.getQuantity()).append(",")
				.append(this.getReorderThresholdQuantity()).append(",")
				.append(this.getPrice()).append(",")
				.append((null != this.getBarcode()) ? this.getBarcode() : "").append(",")
				.append(this.getOrderQuantity());
		return stb.toString();
    }
    
}
