//
//
// Generated by StarUML(tm) Java Add-In
//
// @ Project : SouvenirStore
// @ File Name : DataStore.java
// @ Date : 06/03/2015
// @ Author : Jaya Vignesh
//
//

package sg.edu.nus.iss.se23pt2.pos.datastore;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.AccessDeniedException;
import java.util.ArrayList;

import sg.edu.nus.iss.se23pt2.pos.SouvenirStore;
import sg.edu.nus.iss.se23pt2.pos.exception.CreationFailedException;
import sg.edu.nus.iss.se23pt2.pos.exception.DataLoadFailedException;
import sg.edu.nus.iss.se23pt2.pos.exception.RemoveFailedException;
import sg.edu.nus.iss.se23pt2.pos.exception.UpdateFailedException;

public abstract class DataStore {
    public static final String DATA_FILE_PATH = "data\\";
    private File               file;
    private BufferedWriter     bufferedWriter;
    private BufferedReader     bufferedReader;

    public DataStore (String fileName) throws AccessDeniedException,
            IOException {
        file = new File(DATA_FILE_PATH + fileName);

        // File is created if does not exists
        boolean newFileFlag = file.createNewFile();

        if (!newFileFlag && (!file.canRead() || !file.canWrite())) {
            throw new AccessDeniedException(file.getName() + " not accessible");
        }
    }

    public abstract <T> ArrayList<T> load (SouvenirStore store)
            throws DataLoadFailedException;

    protected abstract <T> boolean matchData (T obj, String data);

    public <T> void create (T obj) throws CreationFailedException {
        try {
            this.write(obj.toString());
        } catch (IOException ioe) {
            throw new CreationFailedException(ioe.getMessage());
        } finally {
            this.close();
        }
    }

    public <T> void update (T obj) throws UpdateFailedException {
        try {
            this.modify(obj, false);
        } catch (IOException ioe) {
            throw new UpdateFailedException(ioe.getMessage());
        }
    }

    public <T> void remove (T obj) throws RemoveFailedException {
        try {
            this.modify(obj, true);
        } catch (IOException ioe) {
            throw new RemoveFailedException(ioe.getMessage());
        }
    }

    protected void write (String data) throws IOException {
        this.getWriter().newLine();
        this.getWriter().write(data);
    }

    protected String read () throws IOException {
        return this.getReader().readLine();
    }

    private BufferedWriter getWriter () throws IOException {
        if (bufferedWriter == null) {
            bufferedWriter = new BufferedWriter(new FileWriter(file, true));
        }
        return bufferedWriter;
    }

    private BufferedReader getReader () throws IOException {
        if (bufferedReader == null) {
            bufferedReader = new BufferedReader(new FileReader(file));
        }
        return bufferedReader;
    }

    protected void close () {
        try {
            if (bufferedWriter != null) {
                bufferedWriter.close();
                bufferedWriter = null;
            }

            if (bufferedReader != null) {
                bufferedReader.close();
                bufferedReader = null;
            }
        } catch (IOException ioe) {
            System.out
                    .println("Reader/Writer close failed " + ioe.getMessage());
            ioe.printStackTrace();
        }
    }

    private <T> void modify (T obj, boolean deleteFlag) throws IOException {
        String fileName = file.getPath();
        File tmpFile = new File(fileName + ".tmp");
        File oldFile = new File(fileName + ".old");
        BufferedReader br = null;
        BufferedWriter bw = null;
        String line;
        boolean recordFound = false;
        try {
            tmpFile.createNewFile();
            br = this.getReader();
            bw = new BufferedWriter(new FileWriter(tmpFile, true));

            while ((line = br.readLine()) != null) {
                if (!recordFound && this.matchData(obj, line)) {
                    if (deleteFlag)
                        continue;

                    bw.append(obj.toString());
                    bw.newLine();
                    recordFound = true;
                } else {
                    bw.append(line);
                    bw.newLine();
                }
            }
            bw.close();
            this.close();

            oldFile.delete();
            file.renameTo(new File(fileName + ".old"));
            tmpFile.renameTo(new File(fileName));
        } catch (IOException e) {
            throw e;
        } finally {
            try {
                if (bw != null)
                    bw.close();
                this.close();
            } catch (IOException e) {
                throw e;
            }
        }
    }
    
    protected void deleteAll() throws RemoveFailedException{
        BufferedWriter bufferedWriter = null;
        try{
            bufferedWriter = new BufferedWriter(new FileWriter(file, false));
            bufferedWriter.write("");
        }catch(IOException e){
            e.printStackTrace();
            throw new RemoveFailedException(e.getMessage());
        }finally{
            try{
                if(bufferedWriter!=null)
                    bufferedWriter.close();
            }catch(IOException e){
                e.printStackTrace();
            }
        }
    }
}
