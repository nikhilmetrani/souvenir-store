//
//
// Generated by StarUML(tm) Java Add-In
//
// @ Project : SouvenirStore
// @ File Name : DataStore.java
// @ Date : 06/03/2015
// @ Author : Jaya Vignesh
//
//

package sg.edu.nus.iss.se23pt2.pos.datastore;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.AccessDeniedException;
import java.util.ArrayList;

import sg.edu.nus.iss.se23pt2.pos.SouvenirStore;
import sg.edu.nus.iss.se23pt2.pos.exception.CreationFailedException;
import sg.edu.nus.iss.se23pt2.pos.exception.DataLoadFailedException;

public abstract class DataStore {
    public static final String DATA_FILE_PATH = "data" + File.pathSeparator;
    private File               file;
    private BufferedWriter     bufferedWriter;
    private BufferedReader     bufferedReader;

    public DataStore (String fileName) throws AccessDeniedException,
            IOException {
        file = new File(DATA_FILE_PATH + fileName);

        // File is created if does not exists
        boolean newFileFlag = file.createNewFile();

        if (!newFileFlag && (!file.canRead() || !file.canWrite())) {
            throw new AccessDeniedException(file.getName() + " not accessible");
        }
    }

    public <T> void create (T obj) throws CreationFailedException {
        try {
            this.write(obj.toString());
        } catch (IOException ioe) {
            new CreationFailedException(ioe.getMessage());
        } finally {
            this.close();
        }
    }

    public abstract <T> void update (T obj);

    public abstract <T> ArrayList<T> load (SouvenirStore store)
            throws DataLoadFailedException;

    public abstract <T> void remove (T obj);

    protected void write (String data) throws IOException {
        this.getWriter().write(data);
        this.getWriter().newLine();
    }

    protected String read () throws IOException {
        return this.getReader().readLine();
    }

    private BufferedWriter getWriter () throws IOException {
        if (bufferedWriter != null) {
            bufferedWriter = new BufferedWriter(new FileWriter(file, true));
        }
        return bufferedWriter;
    }

    private BufferedReader getReader () throws IOException {
        if (bufferedReader != null) {
            bufferedReader = new BufferedReader(new FileReader(file));
        }
        return bufferedReader;
    }

    protected void close () {
        try {
            if (bufferedWriter != null) {
                bufferedWriter.close();
                bufferedWriter = null;
            }

            if (bufferedReader != null) {
                bufferedReader.close();
                bufferedReader = null;
            }
        } catch (IOException ioe) {
            System.out
                    .println("Reader/Writer close failed " + ioe.getMessage());
            ioe.printStackTrace();
        }
    }
}
